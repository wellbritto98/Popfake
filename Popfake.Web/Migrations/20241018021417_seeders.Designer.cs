// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PopFake.Data;

#nullable disable

namespace Popfake.Web.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241018021417_seeders")]
    partial class seeders
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7211",
                            Name = "Player",
                            NormalizedName = "PLAYER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "e24652cd-8923-42ac-a983-8f240311c4c6",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "f450ee56-e379-49f4-b8b1-031d04ae680b",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "d4b943d6-01fa-403e-820d-b78291d1c059",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "70479475-148c-443f-a852-bbd62044b6ca",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "d8fdef36-1a8b-44e5-9715-66fc0748d53c",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "63008a46-2e3c-47b5-b282-2f930e964840",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "2095afb8-6d22-4449-a267-083ac1de4af6",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "14ad6a2b-61f9-4616-bbc1-807f9cc4f6ee",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "80d9a8b9-01ac-415b-b418-ec1e963fc168",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "b5b165ab-2089-4a3f-a9f4-c200756a6efe",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "1c4a2486-1bf7-434a-b8db-cbdbda4db39f",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "09dff3e7-6075-4574-bbaa-33542ac27232",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PopFake.Models.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<DateTime>("BirthAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("BirthCityId")
                        .HasColumnType("integer");

                    b.Property<int>("CurrentLocationId")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Money")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BirthCityId");

                    b.HasIndex("CurrentLocationId");

                    b.HasIndex("UserId");

                    b.ToTable("Characters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 25,
                            BirthAt = new DateTime(2024, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthCityId = 1,
                            CurrentLocationId = 1,
                            FirstName = "John",
                            Gender = "Male",
                            LastName = "Doe",
                            Money = 0m,
                            UserId = "1"
                        },
                        new
                        {
                            Id = 2,
                            Age = 22,
                            BirthAt = new DateTime(2024, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthCityId = 1,
                            CurrentLocationId = 1,
                            FirstName = "Jane",
                            Gender = "Female",
                            LastName = "Doe",
                            Money = 0m,
                            UserId = "1"
                        },
                        new
                        {
                            Id = 3,
                            Age = 30,
                            BirthAt = new DateTime(2024, 10, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthCityId = 1,
                            CurrentLocationId = 1,
                            FirstName = "Bob",
                            Gender = "Male",
                            LastName = "Smith",
                            Money = 0m,
                            UserId = "1"
                        },
                        new
                        {
                            Id = 4,
                            Age = 28,
                            BirthAt = new DateTime(2024, 10, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthCityId = 1,
                            CurrentLocationId = 1,
                            FirstName = "Alice",
                            Gender = "Female",
                            LastName = "Johnson",
                            Money = 0m,
                            UserId = "2"
                        },
                        new
                        {
                            Id = 5,
                            Age = 33,
                            BirthAt = new DateTime(2024, 10, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthCityId = 1,
                            CurrentLocationId = 1,
                            FirstName = "Charlie",
                            Gender = "Male",
                            LastName = "Brown",
                            Money = 0m,
                            UserId = "2"
                        },
                        new
                        {
                            Id = 6,
                            Age = 35,
                            BirthAt = new DateTime(2024, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthCityId = 1,
                            CurrentLocationId = 1,
                            FirstName = "Dave",
                            Gender = "Male",
                            LastName = "Wilson",
                            Money = 0m,
                            UserId = "2"
                        },
                        new
                        {
                            Id = 7,
                            Age = 21,
                            BirthAt = new DateTime(2024, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthCityId = 1,
                            CurrentLocationId = 1,
                            FirstName = "Emily",
                            Gender = "Female",
                            LastName = "Davis",
                            Money = 0m,
                            UserId = "3"
                        },
                        new
                        {
                            Id = 8,
                            Age = 27,
                            BirthAt = new DateTime(2024, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthCityId = 1,
                            CurrentLocationId = 1,
                            FirstName = "Frank",
                            Gender = "Male",
                            LastName = "Miller",
                            Money = 0m,
                            UserId = "3"
                        },
                        new
                        {
                            Id = 9,
                            Age = 19,
                            BirthAt = new DateTime(2024, 10, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthCityId = 1,
                            CurrentLocationId = 1,
                            FirstName = "Grace",
                            Gender = "Female",
                            LastName = "Lee",
                            Money = 0m,
                            UserId = "3"
                        },
                        new
                        {
                            Id = 10,
                            Age = 23,
                            BirthAt = new DateTime(2024, 10, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthCityId = 1,
                            CurrentLocationId = 1,
                            FirstName = "Hank",
                            Gender = "Male",
                            LastName = "Taylor",
                            Money = 0m,
                            UserId = "4"
                        },
                        new
                        {
                            Id = 11,
                            Age = 26,
                            BirthAt = new DateTime(2024, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthCityId = 1,
                            CurrentLocationId = 1,
                            FirstName = "Ivy",
                            Gender = "Female",
                            LastName = "White",
                            Money = 0m,
                            UserId = "4"
                        },
                        new
                        {
                            Id = 12,
                            Age = 32,
                            BirthAt = new DateTime(2024, 10, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthCityId = 1,
                            CurrentLocationId = 1,
                            FirstName = "Jack",
                            Gender = "Male",
                            LastName = "Black",
                            Money = 0m,
                            UserId = "4"
                        });
                });

            modelBuilder.Entity("PopFake.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Rio de Janeiro",
                            Timezone = "America/Sao_Paulo"
                        });
                });

            modelBuilder.Entity("PopFake.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<int>("CompanyType")
                        .HasColumnType("integer");

                    b.Property<decimal>("Money")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            CompanyType = 0,
                            Money = 1000000000m,
                            Name = "Prefeitura do Rio de Janeiro"
                        });
                });

            modelBuilder.Entity("PopFake.Models.CompanyShareholder", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsPresident")
                        .HasColumnType("boolean");

                    b.Property<int>("Shares")
                        .HasColumnType("integer");

                    b.HasKey("CharacterId", "CompanyId");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyShareholders");
                });

            modelBuilder.Entity("PopFake.Models.ExampleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Examples");
                });

            modelBuilder.Entity("PopFake.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Money")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Quality")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            CompanyId = 1,
                            Money = 1000000m,
                            Name = "Praia de Copacabana",
                            Quality = 5,
                            Type = 0,
                            TypeId = 0
                        },
                        new
                        {
                            Id = 2,
                            CityId = 1,
                            CompanyId = 1,
                            Money = 1000000m,
                            Name = "Parque do Flamengo",
                            Quality = 5,
                            Type = 0,
                            TypeId = 1
                        },
                        new
                        {
                            Id = 3,
                            CityId = 1,
                            CompanyId = 1,
                            Money = 1000000m,
                            Name = "Parque Olímpico",
                            Quality = 5,
                            Type = 0,
                            TypeId = 2
                        },
                        new
                        {
                            Id = 4,
                            CityId = 1,
                            CompanyId = 1,
                            Money = 1000000m,
                            Name = "Academia de Ginástica",
                            Quality = 5,
                            Type = 0,
                            TypeId = 3
                        },
                        new
                        {
                            Id = 5,
                            CityId = 1,
                            CompanyId = 1,
                            Money = 1000000m,
                            Name = "Hotel Copacabana Palace",
                            Quality = 5,
                            Type = 0,
                            TypeId = 4
                        },
                        new
                        {
                            Id = 6,
                            CityId = 1,
                            CompanyId = 1,
                            Money = 1000000m,
                            Name = "Restaurante Fasano",
                            Quality = 5,
                            Type = 0,
                            TypeId = 5
                        },
                        new
                        {
                            Id = 7,
                            CityId = 1,
                            CompanyId = 1,
                            Money = 1000000m,
                            Name = "Loja de Artigos Esportivos",
                            Quality = 5,
                            Type = 0,
                            TypeId = 6
                        },
                        new
                        {
                            Id = 8,
                            CityId = 1,
                            CompanyId = 1,
                            Money = 1000000m,
                            Name = "Centro de Treinamento",
                            Quality = 5,
                            Type = 0,
                            TypeId = 7
                        });
                });

            modelBuilder.Entity("PopFake.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("TokenCreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("TokenExpiredAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e24652cd-8923-42ac-a983-8f240311c4c6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "30b1c05c-1526-4383-bf10-6a97b4571413",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user1@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "User 1",
                            NormalizedEmail = "USER1@EXAMPLE.COM",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAIAAYagAAAAEPkeOyGnQij2C+IPKcYBdZWwAWXt58Y68KjV6/gXYjGK5+2y70K8UPdjUgGcBe9+ZA==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 17, 23, 14, 16, 65, DateTimeKind.Local).AddTicks(777),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user1"
                        },
                        new
                        {
                            Id = "f450ee56-e379-49f4-b8b1-031d04ae680b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8dad03aa-a10f-4f92-b4ed-ed5848f65d51",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user2@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "User 2",
                            NormalizedEmail = "USER2@EXAMPLE.COM",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAIAAYagAAAAEIHSEmR1ZTmkXhgNOQOW4nvQYRH+yW7tXNKS2CbJwftnk5W6IWqWO6NhMfx7KJVKsQ==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 17, 23, 14, 16, 153, DateTimeKind.Local).AddTicks(3838),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user2"
                        },
                        new
                        {
                            Id = "d4b943d6-01fa-403e-820d-b78291d1c059",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "75310ebc-1a0d-435e-8517-419e2a9a14b1",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user3@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "User 3",
                            NormalizedEmail = "USER3@EXAMPLE.COM",
                            NormalizedUserName = "USER3",
                            PasswordHash = "AQAAAAIAAYagAAAAEN4GenvhWlZqdTqdviiblRgqDYRe9sLobkHI5qysKfunBmMIrdenmF/ZnX1o0R215w==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 17, 23, 14, 16, 229, DateTimeKind.Local).AddTicks(3146),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user3"
                        },
                        new
                        {
                            Id = "70479475-148c-443f-a852-bbd62044b6ca",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9466fdac-7c65-4c89-bc3b-4662d1b27507",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user4@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "User 4",
                            NormalizedEmail = "USER4@EXAMPLE.COM",
                            NormalizedUserName = "USER4",
                            PasswordHash = "AQAAAAIAAYagAAAAEISV2TzHjgosQHWjWARNLH8roVEjsG+4bED3EmGUWW1UqAwzQpzqZ8q3D8jKjvopAA==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 17, 23, 14, 16, 313, DateTimeKind.Local).AddTicks(264),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user4"
                        },
                        new
                        {
                            Id = "d8fdef36-1a8b-44e5-9715-66fc0748d53c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2adbddc3-c523-4e64-84d5-62ff376dff73",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user5@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "User 5",
                            NormalizedEmail = "USER5@EXAMPLE.COM",
                            NormalizedUserName = "USER5",
                            PasswordHash = "AQAAAAIAAYagAAAAEACNnl7Q3gLplhAsTS3KsbE/dwv81noWvQ7R/bUT48amvEzqUkDos0E2e0zS+gvCxw==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 17, 23, 14, 16, 395, DateTimeKind.Local).AddTicks(4739),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user5"
                        },
                        new
                        {
                            Id = "63008a46-2e3c-47b5-b282-2f930e964840",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b94cc6ec-2360-40b1-bf71-3683dbae0a24",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user6@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "User 6",
                            NormalizedEmail = "USER6@EXAMPLE.COM",
                            NormalizedUserName = "USER6",
                            PasswordHash = "AQAAAAIAAYagAAAAECYqu67XNCiVwqdKMdvi9EZpTYE7W3BrLlAvV97rf2v9WEg5YYg6h/hTYDxhizViAA==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 17, 23, 14, 16, 486, DateTimeKind.Local).AddTicks(4182),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user6"
                        },
                        new
                        {
                            Id = "2095afb8-6d22-4449-a267-083ac1de4af6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "97c72ffb-04c5-42aa-a579-06681bc7b0e5",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user7@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "User 7",
                            NormalizedEmail = "USER7@EXAMPLE.COM",
                            NormalizedUserName = "USER7",
                            PasswordHash = "AQAAAAIAAYagAAAAEPEAjKZABJ28dHz9iESYPMnzFTI+UgPJ++GCGAO50fkvbH876aetVRvfB71OSAllDg==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 17, 23, 14, 16, 569, DateTimeKind.Local).AddTicks(1608),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user7"
                        },
                        new
                        {
                            Id = "14ad6a2b-61f9-4616-bbc1-807f9cc4f6ee",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "64e1641d-3c33-44a3-b6ed-295a7003bdbb",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user8@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "User 8",
                            NormalizedEmail = "USER8@EXAMPLE.COM",
                            NormalizedUserName = "USER8",
                            PasswordHash = "AQAAAAIAAYagAAAAEGLpzYuHJ3e9+R11r9pd10puKkW6iy8u5Ajow7Crgnb/n8sxMbdImhp/GvG+G1aO+w==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 17, 23, 14, 16, 658, DateTimeKind.Local).AddTicks(9267),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user8"
                        },
                        new
                        {
                            Id = "80d9a8b9-01ac-415b-b418-ec1e963fc168",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "14d1cce4-3e39-4c26-aa7c-9580401234b2",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user9@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "User 9",
                            NormalizedEmail = "USER9@EXAMPLE.COM",
                            NormalizedUserName = "USER9",
                            PasswordHash = "AQAAAAIAAYagAAAAEDxTvk+aqtCA9Hax5e8Sifo4sllwkTtXKjHqzX+RqpRLQKaK4DDenWmD9derEhhn5w==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 17, 23, 14, 16, 744, DateTimeKind.Local).AddTicks(5749),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user9"
                        },
                        new
                        {
                            Id = "b5b165ab-2089-4a3f-a9f4-c200756a6efe",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "43e69c5f-1b17-4989-bc7d-f90074f534bc",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user10@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "User 10",
                            NormalizedEmail = "USER10@EXAMPLE.COM",
                            NormalizedUserName = "USER10",
                            PasswordHash = "AQAAAAIAAYagAAAAEAFOCjL2v//WgbfalCE62IZ2JGXeA8XwT1j4yZb+5xvu/ukKIEdEHLfXt5bzPRXXXg==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 17, 23, 14, 16, 833, DateTimeKind.Local).AddTicks(8399),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user10"
                        },
                        new
                        {
                            Id = "1c4a2486-1bf7-434a-b8db-cbdbda4db39f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f8ca7c93-ce36-44cc-b5b8-110da0ebe6d9",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user11@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "User 11",
                            NormalizedEmail = "USER11@EXAMPLE.COM",
                            NormalizedUserName = "USER11",
                            PasswordHash = "AQAAAAIAAYagAAAAEIj+q5zqPLhpzOLqq/i20dBZJsdQ8+zCYJO4NQUXFfevS1eRX26TVkSDzXK1QBZPgw==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 17, 23, 14, 16, 907, DateTimeKind.Local).AddTicks(4304),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user11"
                        },
                        new
                        {
                            Id = "09dff3e7-6075-4574-bbaa-33542ac27232",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1e41deff-741a-4ce2-89d8-fb91a590cb46",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user12@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "User 12",
                            NormalizedEmail = "USER12@EXAMPLE.COM",
                            NormalizedUserName = "USER12",
                            PasswordHash = "AQAAAAIAAYagAAAAELtAcsVCNB5ZhFOwdjK+bzqkHsHezMae/Xw4YEAVP4q/XX5X7aNcDMNm1t2isgkQrw==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 17, 23, 14, 16, 977, DateTimeKind.Local).AddTicks(7397),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user12"
                        },
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c02b4ff6-8743-43c3-99ff-74c7be914726",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "userunique1@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "User One",
                            NormalizedEmail = "USERUNIQUE1@EMAIL.COM",
                            NormalizedUserName = "USERUNIQUE1",
                            PasswordHash = "AQAAAAIAAYagAAAAEOs9qjl2vhsV3tEYrsIaVD5fO/JsL0VPtfncutbvXhYs/avFgkoxw0ITGJjEUc8fvQ==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 17, 23, 14, 17, 51, DateTimeKind.Local).AddTicks(3948),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "userunique1"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d8f61ffe-cd75-4285-9f21-30530157b029",
                            DataNascimento = new DateTime(1985, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "userunique2@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "User Two",
                            NormalizedEmail = "USERUNIQUE2@EMAIL.COM",
                            NormalizedUserName = "USERUNIQUE2",
                            PasswordHash = "AQAAAAIAAYagAAAAEEJUTGdiVrsjyIPc8ppIqzNcecNnB4FUaey/RD0zKUGCX3YaDdTDLSUlPmOzUio7lg==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 17, 23, 14, 17, 120, DateTimeKind.Local).AddTicks(4181),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "userunique2"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5fe6e981-7cda-44df-a2d3-9e56cacfa43b",
                            DataNascimento = new DateTime(1990, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "userunique3@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "User Three",
                            NormalizedEmail = "USERUNIQUE3@EMAIL.COM",
                            NormalizedUserName = "USERUNIQUE3",
                            PasswordHash = "AQAAAAIAAYagAAAAEE/TWo9kKZx7ZEtqY2fFNES5Cb684VQUOJvrFteFVneCjM0AD14PLICrAq1p/ZZM0w==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 17, 23, 14, 17, 187, DateTimeKind.Local).AddTicks(9036),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "userunique3"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e8733d88-2d67-44a8-8d87-0a325499f617",
                            DataNascimento = new DateTime(1995, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "userunique4@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "User Four",
                            NormalizedEmail = "USERUNIQUE4@EMAIL.COM",
                            NormalizedUserName = "USERUNIQUE4",
                            PasswordHash = "AQAAAAIAAYagAAAAEE/Qg6vX1/LxXXob0Ceq4X3EGHhHvejTDdaBuAB9utEDSQMjPWe2OQJiw6pPzXxpRw==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 17, 23, 14, 17, 258, DateTimeKind.Local).AddTicks(7269),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "userunique4"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PopFake.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PopFake.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PopFake.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PopFake.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PopFake.Models.Character", b =>
                {
                    b.HasOne("PopFake.Models.City", "BirthCity")
                        .WithMany("Characters")
                        .HasForeignKey("BirthCityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PopFake.Models.Location", "CurrentLocation")
                        .WithMany("Characters")
                        .HasForeignKey("CurrentLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PopFake.Models.User", "User")
                        .WithMany("Characters")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BirthCity");

                    b.Navigation("CurrentLocation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PopFake.Models.Company", b =>
                {
                    b.HasOne("PopFake.Models.City", "City")
                        .WithMany("Companies")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("PopFake.Models.CompanyShareholder", b =>
                {
                    b.HasOne("PopFake.Models.Character", "Character")
                        .WithMany("CompanyShareholders")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PopFake.Models.Company", "Company")
                        .WithMany("CompanyShareholders")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("PopFake.Models.Location", b =>
                {
                    b.HasOne("PopFake.Models.City", "City")
                        .WithMany("Locations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PopFake.Models.Company", "Company")
                        .WithMany("Locations")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("PopFake.Models.Character", b =>
                {
                    b.Navigation("CompanyShareholders");
                });

            modelBuilder.Entity("PopFake.Models.City", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("Companies");

                    b.Navigation("Locations");
                });

            modelBuilder.Entity("PopFake.Models.Company", b =>
                {
                    b.Navigation("CompanyShareholders");

                    b.Navigation("Locations");
                });

            modelBuilder.Entity("PopFake.Models.Location", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("PopFake.Models.User", b =>
                {
                    b.Navigation("Characters");
                });
#pragma warning restore 612, 618
        }
    }
}
