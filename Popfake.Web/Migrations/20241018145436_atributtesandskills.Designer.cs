// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PopFake.Data;

#nullable disable

namespace Popfake.Web.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241018145436_atributtesandskills")]
    partial class atributtesandskills
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7211",
                            Name = "Player",
                            NormalizedName = "PLAYER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "a2a394da-9e6f-4b69-86af-47e5e5d9aa19",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "3cfeecb7-434f-48f0-8ec5-1be786b86f36",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "d54607d2-7e13-44a6-9ead-aafa1ca2b1f4",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "b3c48c94-b450-45c6-bac6-5e584080518d",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "8ad43550-1163-426f-9c17-469c5427e1d5",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "2d23296f-2d6b-482f-9261-018a2b23489b",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "7f83a912-ec7d-44e6-ac9b-dc1d0c8a72fc",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "470407c6-94ce-4425-8a8a-680a48b3d686",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "b5742a7e-0648-4d67-afb0-989c249b0f31",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "e9e29f87-dc0d-4ce5-8261-d86c3ec85226",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "c7add045-8c50-472d-b556-533a665319ac",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "c2f58402-3255-4a6c-a4cd-c6a8e28f98fc",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PopFake.Models.Atributte", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Atributtes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "The ability to perform tasks with precision and agility.",
                            Name = "Dexterity"
                        },
                        new
                        {
                            Id = 2,
                            Description = "The physical power and ability to perform tasks requiring muscular effort.",
                            Name = "Strength"
                        },
                        new
                        {
                            Id = 3,
                            Description = "The ability to learn, understand, and apply knowledge.",
                            Name = "Intelligence"
                        },
                        new
                        {
                            Id = 4,
                            Description = "The physical endurance and ability to withstand adversities.",
                            Name = "Constitution"
                        },
                        new
                        {
                            Id = 5,
                            Description = "The ability to innovate and think in an original and inventive way.",
                            Name = "Creativity"
                        });
                });

            modelBuilder.Entity("PopFake.Models.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<DateTime>("BirthAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("BirthCityId")
                        .HasColumnType("integer");

                    b.Property<int>("CurrentLocationId")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Money")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BirthCityId");

                    b.HasIndex("CurrentLocationId");

                    b.HasIndex("UserId");

                    b.ToTable("Characters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 25,
                            BirthAt = new DateTime(2024, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthCityId = 1,
                            CurrentLocationId = 1,
                            FirstName = "John",
                            Gender = "Male",
                            LastName = "Doe",
                            Money = 0m,
                            UserId = "1"
                        },
                        new
                        {
                            Id = 2,
                            Age = 22,
                            BirthAt = new DateTime(2024, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthCityId = 1,
                            CurrentLocationId = 1,
                            FirstName = "Jane",
                            Gender = "Female",
                            LastName = "Doe",
                            Money = 0m,
                            UserId = "1"
                        },
                        new
                        {
                            Id = 3,
                            Age = 30,
                            BirthAt = new DateTime(2024, 10, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthCityId = 1,
                            CurrentLocationId = 1,
                            FirstName = "Bob",
                            Gender = "Male",
                            LastName = "Smith",
                            Money = 0m,
                            UserId = "1"
                        },
                        new
                        {
                            Id = 4,
                            Age = 28,
                            BirthAt = new DateTime(2024, 10, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthCityId = 1,
                            CurrentLocationId = 1,
                            FirstName = "Alice",
                            Gender = "Female",
                            LastName = "Johnson",
                            Money = 0m,
                            UserId = "2"
                        },
                        new
                        {
                            Id = 5,
                            Age = 33,
                            BirthAt = new DateTime(2024, 10, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthCityId = 1,
                            CurrentLocationId = 1,
                            FirstName = "Charlie",
                            Gender = "Male",
                            LastName = "Brown",
                            Money = 0m,
                            UserId = "2"
                        },
                        new
                        {
                            Id = 6,
                            Age = 35,
                            BirthAt = new DateTime(2024, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthCityId = 1,
                            CurrentLocationId = 1,
                            FirstName = "Dave",
                            Gender = "Male",
                            LastName = "Wilson",
                            Money = 0m,
                            UserId = "2"
                        },
                        new
                        {
                            Id = 7,
                            Age = 21,
                            BirthAt = new DateTime(2024, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthCityId = 1,
                            CurrentLocationId = 1,
                            FirstName = "Emily",
                            Gender = "Female",
                            LastName = "Davis",
                            Money = 0m,
                            UserId = "3"
                        },
                        new
                        {
                            Id = 8,
                            Age = 27,
                            BirthAt = new DateTime(2024, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthCityId = 1,
                            CurrentLocationId = 1,
                            FirstName = "Frank",
                            Gender = "Male",
                            LastName = "Miller",
                            Money = 0m,
                            UserId = "3"
                        },
                        new
                        {
                            Id = 9,
                            Age = 19,
                            BirthAt = new DateTime(2024, 10, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthCityId = 1,
                            CurrentLocationId = 1,
                            FirstName = "Grace",
                            Gender = "Female",
                            LastName = "Lee",
                            Money = 0m,
                            UserId = "3"
                        },
                        new
                        {
                            Id = 10,
                            Age = 23,
                            BirthAt = new DateTime(2024, 10, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthCityId = 1,
                            CurrentLocationId = 1,
                            FirstName = "Hank",
                            Gender = "Male",
                            LastName = "Taylor",
                            Money = 0m,
                            UserId = "4"
                        },
                        new
                        {
                            Id = 11,
                            Age = 26,
                            BirthAt = new DateTime(2024, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthCityId = 1,
                            CurrentLocationId = 1,
                            FirstName = "Ivy",
                            Gender = "Female",
                            LastName = "White",
                            Money = 0m,
                            UserId = "4"
                        },
                        new
                        {
                            Id = 12,
                            Age = 32,
                            BirthAt = new DateTime(2024, 10, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthCityId = 1,
                            CurrentLocationId = 1,
                            FirstName = "Jack",
                            Gender = "Male",
                            LastName = "Black",
                            Money = 0m,
                            UserId = "4"
                        });
                });

            modelBuilder.Entity("PopFake.Models.CharacterAtributte", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    b.Property<int>("AtributteId")
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.HasKey("CharacterId", "AtributteId");

                    b.HasIndex("AtributteId");

                    b.ToTable("CharacterAtributtes");
                });

            modelBuilder.Entity("PopFake.Models.CharacterSkill", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    b.Property<int>("SkillId")
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.HasKey("CharacterId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("CharacterSkills");
                });

            modelBuilder.Entity("PopFake.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Rio de Janeiro",
                            Timezone = "America/Sao_Paulo"
                        });
                });

            modelBuilder.Entity("PopFake.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<int>("CompanyType")
                        .HasColumnType("integer");

                    b.Property<decimal>("Money")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            CompanyType = 0,
                            Money = 1000000000m,
                            Name = "Prefeitura do Rio de Janeiro"
                        });
                });

            modelBuilder.Entity("PopFake.Models.CompanyShareholder", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsPresident")
                        .HasColumnType("boolean");

                    b.Property<int>("Shares")
                        .HasColumnType("integer");

                    b.HasKey("CharacterId", "CompanyId");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyShareholders");
                });

            modelBuilder.Entity("PopFake.Models.ExampleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Examples");
                });

            modelBuilder.Entity("PopFake.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Money")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Quality")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            CompanyId = 1,
                            Money = 1000000m,
                            Name = "Praia de Copacabana",
                            Quality = 5,
                            Type = 0,
                            TypeId = 0
                        },
                        new
                        {
                            Id = 2,
                            CityId = 1,
                            CompanyId = 1,
                            Money = 1000000m,
                            Name = "Parque do Flamengo",
                            Quality = 5,
                            Type = 0,
                            TypeId = 1
                        },
                        new
                        {
                            Id = 3,
                            CityId = 1,
                            CompanyId = 1,
                            Money = 1000000m,
                            Name = "Parque Olímpico",
                            Quality = 5,
                            Type = 0,
                            TypeId = 2
                        },
                        new
                        {
                            Id = 4,
                            CityId = 1,
                            CompanyId = 1,
                            Money = 1000000m,
                            Name = "Academia de Ginástica",
                            Quality = 5,
                            Type = 0,
                            TypeId = 3
                        },
                        new
                        {
                            Id = 5,
                            CityId = 1,
                            CompanyId = 1,
                            Money = 1000000m,
                            Name = "Hotel Copacabana Palace",
                            Quality = 5,
                            Type = 0,
                            TypeId = 4
                        },
                        new
                        {
                            Id = 6,
                            CityId = 1,
                            CompanyId = 1,
                            Money = 1000000m,
                            Name = "Restaurante Fasano",
                            Quality = 5,
                            Type = 0,
                            TypeId = 5
                        },
                        new
                        {
                            Id = 7,
                            CityId = 1,
                            CompanyId = 1,
                            Money = 1000000m,
                            Name = "Loja de Artigos Esportivos",
                            Quality = 5,
                            Type = 0,
                            TypeId = 6
                        },
                        new
                        {
                            Id = 8,
                            CityId = 1,
                            CompanyId = 1,
                            Money = 1000000m,
                            Name = "Centro de Treinamento",
                            Quality = 5,
                            Type = 0,
                            TypeId = 7
                        });
                });

            modelBuilder.Entity("PopFake.Models.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("PopFake.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("TokenCreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("TokenExpiredAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a2a394da-9e6f-4b69-86af-47e5e5d9aa19",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "393981a3-4b13-4cd3-a167-4aca59c5209e",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user1@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "User 1",
                            NormalizedEmail = "USER1@EXAMPLE.COM",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAIAAYagAAAAEPL79g5gs/qrjfe9LOiRm4Jwz2jlwHZYAoJdmlxLne8d8gf8m/TKH9TQzTPe3tjH8g==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 18, 11, 54, 34, 359, DateTimeKind.Local).AddTicks(3521),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user1"
                        },
                        new
                        {
                            Id = "3cfeecb7-434f-48f0-8ec5-1be786b86f36",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f0b9352d-4b37-4bb5-a447-0db7abb37034",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user2@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "User 2",
                            NormalizedEmail = "USER2@EXAMPLE.COM",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAIAAYagAAAAEIo53ZkxR96xc7zDNa2sKy5vE+qfwEO5bt+ePU7UhXLNNU1drqRDveDTtZcEYv6jVA==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 18, 11, 54, 34, 447, DateTimeKind.Local).AddTicks(2995),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user2"
                        },
                        new
                        {
                            Id = "d54607d2-7e13-44a6-9ead-aafa1ca2b1f4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "40fc2284-f9d0-407f-b23a-0f5cfb1557bf",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user3@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "User 3",
                            NormalizedEmail = "USER3@EXAMPLE.COM",
                            NormalizedUserName = "USER3",
                            PasswordHash = "AQAAAAIAAYagAAAAEL+5bYO2v6ejkZdV6Mfb3HpTeaQM3xezvtQR1JEIKZcj+j6RqIo6s9HcuVCYLgcEzw==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 18, 11, 54, 34, 535, DateTimeKind.Local).AddTicks(964),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user3"
                        },
                        new
                        {
                            Id = "b3c48c94-b450-45c6-bac6-5e584080518d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9619331d-b470-46f5-8fd7-758891ded375",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user4@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "User 4",
                            NormalizedEmail = "USER4@EXAMPLE.COM",
                            NormalizedUserName = "USER4",
                            PasswordHash = "AQAAAAIAAYagAAAAEEFh5J9xteLomVYqiW95L0ips5XF9YEWquaV6W82/8h9dHBC8Rd8dtdKN2X74H9VFQ==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 18, 11, 54, 34, 605, DateTimeKind.Local).AddTicks(3899),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user4"
                        },
                        new
                        {
                            Id = "8ad43550-1163-426f-9c17-469c5427e1d5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "957a25c4-b147-4285-accb-e69155d5b116",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user5@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "User 5",
                            NormalizedEmail = "USER5@EXAMPLE.COM",
                            NormalizedUserName = "USER5",
                            PasswordHash = "AQAAAAIAAYagAAAAEHpdFtV4id2wt1cQZjSxf6pZ6OX/Mt1p+XEVlGeoZHcn/k6HbOvkvlf3qX/wqpEw+g==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 18, 11, 54, 34, 695, DateTimeKind.Local).AddTicks(2417),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user5"
                        },
                        new
                        {
                            Id = "2d23296f-2d6b-482f-9261-018a2b23489b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e0e14bec-992d-4df0-84d7-837d34800437",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user6@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "User 6",
                            NormalizedEmail = "USER6@EXAMPLE.COM",
                            NormalizedUserName = "USER6",
                            PasswordHash = "AQAAAAIAAYagAAAAEHlFgK4+/6g2JcQzO+GRRTEGXM7NwuiKEeRWpxfjCeEk+gZdIEAVyw1QFJi3tpb7sg==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 18, 11, 54, 34, 779, DateTimeKind.Local).AddTicks(5428),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user6"
                        },
                        new
                        {
                            Id = "7f83a912-ec7d-44e6-ac9b-dc1d0c8a72fc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d0b02aad-7d16-4ba6-9c2a-009f28462198",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user7@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "User 7",
                            NormalizedEmail = "USER7@EXAMPLE.COM",
                            NormalizedUserName = "USER7",
                            PasswordHash = "AQAAAAIAAYagAAAAEPSZUQQfcyIeF79Ajg18af+6NbERwJXkr4H+SnNNPlpBYwfVF8hIPYNMJ3REMmrlTw==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 18, 11, 54, 34, 857, DateTimeKind.Local).AddTicks(2409),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user7"
                        },
                        new
                        {
                            Id = "470407c6-94ce-4425-8a8a-680a48b3d686",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "14dad133-49ff-4e84-bdd5-66fbce1b5676",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user8@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "User 8",
                            NormalizedEmail = "USER8@EXAMPLE.COM",
                            NormalizedUserName = "USER8",
                            PasswordHash = "AQAAAAIAAYagAAAAEE9+8KCWuD4Swdkw697mDeSPpquaLEC1sfJaBjCE6eJ05BW0PtFW+pnNfyPIdt+Flw==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 18, 11, 54, 34, 935, DateTimeKind.Local).AddTicks(2115),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user8"
                        },
                        new
                        {
                            Id = "b5742a7e-0648-4d67-afb0-989c249b0f31",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "48ed864f-0c7c-478e-a26a-b980695f71a8",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user9@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "User 9",
                            NormalizedEmail = "USER9@EXAMPLE.COM",
                            NormalizedUserName = "USER9",
                            PasswordHash = "AQAAAAIAAYagAAAAEHPLD5ZSck+qqM+2vSmMjywzp0PiyqmXplm32Ivoe4pds3cy2dM62cVqroFf+2WwhQ==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 18, 11, 54, 34, 998, DateTimeKind.Local).AddTicks(925),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user9"
                        },
                        new
                        {
                            Id = "e9e29f87-dc0d-4ce5-8261-d86c3ec85226",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "57780347-ff65-4c80-b6c5-a9b2b41715ad",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user10@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "User 10",
                            NormalizedEmail = "USER10@EXAMPLE.COM",
                            NormalizedUserName = "USER10",
                            PasswordHash = "AQAAAAIAAYagAAAAENbMis92XN8M+y+r/jpHYWJk4vxdEMTJTcFJpHTZIZ3VFhGd66sskrwLKgO5jD5RTA==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 18, 11, 54, 35, 59, DateTimeKind.Local).AddTicks(1760),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user10"
                        },
                        new
                        {
                            Id = "c7add045-8c50-472d-b556-533a665319ac",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5c2b523c-a1b5-4ae5-b9e6-98278a12d7b3",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user11@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "User 11",
                            NormalizedEmail = "USER11@EXAMPLE.COM",
                            NormalizedUserName = "USER11",
                            PasswordHash = "AQAAAAIAAYagAAAAEMYBKKMBDMAeJWmf1Vnm3U9tGnu0sbqYJVCgtK7Oz242W2Rzd7MFSo4Jy5IIGRGpRA==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 18, 11, 54, 35, 126, DateTimeKind.Local).AddTicks(3569),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user11"
                        },
                        new
                        {
                            Id = "c2f58402-3255-4a6c-a4cd-c6a8e28f98fc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c4209611-1754-47f2-bbfc-045ca6de4d20",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user12@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "User 12",
                            NormalizedEmail = "USER12@EXAMPLE.COM",
                            NormalizedUserName = "USER12",
                            PasswordHash = "AQAAAAIAAYagAAAAEACW1eCZMzGulp975Sj8zzMIOiHF1LDv0U4+jePfdzmyOH201lNU1ArGufTb94kWYQ==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 18, 11, 54, 35, 188, DateTimeKind.Local).AddTicks(7768),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user12"
                        },
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "206e480f-1528-497a-9a13-8d0251196545",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "userunique1@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "User One",
                            NormalizedEmail = "USERUNIQUE1@EMAIL.COM",
                            NormalizedUserName = "USERUNIQUE1",
                            PasswordHash = "AQAAAAIAAYagAAAAEA7jXJB5nU8IWP2hqs5ZkgBe/j4Wrd86i8/0hh6ZwCN6Wt15nPfjOhDSeEjCaE+xGg==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 18, 11, 54, 35, 247, DateTimeKind.Local).AddTicks(6249),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "userunique1"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "58e6bf90-228c-4051-8b20-3d8c675b45cc",
                            DataNascimento = new DateTime(1985, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "userunique2@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "User Two",
                            NormalizedEmail = "USERUNIQUE2@EMAIL.COM",
                            NormalizedUserName = "USERUNIQUE2",
                            PasswordHash = "AQAAAAIAAYagAAAAEFUQXzivtj2lK2ynE+vR7Jj7GDncSECFlAuvWGs3Mnvdsglc47xIEZwjosqJSBhlQg==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 18, 11, 54, 35, 308, DateTimeKind.Local).AddTicks(4165),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "userunique2"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "825cc49f-a85c-47a2-b36c-3df5c3da32f8",
                            DataNascimento = new DateTime(1990, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "userunique3@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "User Three",
                            NormalizedEmail = "USERUNIQUE3@EMAIL.COM",
                            NormalizedUserName = "USERUNIQUE3",
                            PasswordHash = "AQAAAAIAAYagAAAAEJwviJAw8HOvQB+BLyccUgbbX5cMGWOV4PuJjgtyB/xYjIZtkw0BKpThSQpHAEJIUw==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 18, 11, 54, 35, 366, DateTimeKind.Local).AddTicks(3045),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "userunique3"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "749ddb91-db94-4cfb-a8bf-7be09bc5d146",
                            DataNascimento = new DateTime(1995, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "userunique4@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "User Four",
                            NormalizedEmail = "USERUNIQUE4@EMAIL.COM",
                            NormalizedUserName = "USERUNIQUE4",
                            PasswordHash = "AQAAAAIAAYagAAAAENJKC6/PLJ6wGyFLZVrh628So3cvcKC9luad7R56MOfuABcPfuMVdmJGjsn1KW1wBg==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 10, 18, 11, 54, 35, 428, DateTimeKind.Local).AddTicks(101),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "userunique4"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PopFake.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PopFake.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PopFake.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PopFake.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PopFake.Models.Character", b =>
                {
                    b.HasOne("PopFake.Models.City", "BirthCity")
                        .WithMany("Characters")
                        .HasForeignKey("BirthCityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PopFake.Models.Location", "CurrentLocation")
                        .WithMany("Characters")
                        .HasForeignKey("CurrentLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PopFake.Models.User", "User")
                        .WithMany("Characters")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BirthCity");

                    b.Navigation("CurrentLocation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PopFake.Models.CharacterAtributte", b =>
                {
                    b.HasOne("PopFake.Models.Atributte", "Atributte")
                        .WithMany("CharacterAtributtes")
                        .HasForeignKey("AtributteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PopFake.Models.Character", "Character")
                        .WithMany("CharacterAtributtes")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Atributte");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("PopFake.Models.CharacterSkill", b =>
                {
                    b.HasOne("PopFake.Models.Character", "Character")
                        .WithMany("CharacterSkills")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PopFake.Models.Skill", "Skill")
                        .WithMany("CharacterSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("PopFake.Models.Company", b =>
                {
                    b.HasOne("PopFake.Models.City", "City")
                        .WithMany("Companies")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("PopFake.Models.CompanyShareholder", b =>
                {
                    b.HasOne("PopFake.Models.Character", "Character")
                        .WithMany("CompanyShareholders")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PopFake.Models.Company", "Company")
                        .WithMany("CompanyShareholders")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("PopFake.Models.Location", b =>
                {
                    b.HasOne("PopFake.Models.City", "City")
                        .WithMany("Locations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PopFake.Models.Company", "Company")
                        .WithMany("Locations")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("PopFake.Models.Atributte", b =>
                {
                    b.Navigation("CharacterAtributtes");
                });

            modelBuilder.Entity("PopFake.Models.Character", b =>
                {
                    b.Navigation("CharacterAtributtes");

                    b.Navigation("CharacterSkills");

                    b.Navigation("CompanyShareholders");
                });

            modelBuilder.Entity("PopFake.Models.City", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("Companies");

                    b.Navigation("Locations");
                });

            modelBuilder.Entity("PopFake.Models.Company", b =>
                {
                    b.Navigation("CompanyShareholders");

                    b.Navigation("Locations");
                });

            modelBuilder.Entity("PopFake.Models.Location", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("PopFake.Models.Skill", b =>
                {
                    b.Navigation("CharacterSkills");
                });

            modelBuilder.Entity("PopFake.Models.User", b =>
                {
                    b.Navigation("Characters");
                });
#pragma warning restore 612, 618
        }
    }
}
